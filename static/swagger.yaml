swagger: '2.0'
info:
  title: API_task_manager
  description: Test task
  contact:
    email: ivanzorya@gmail.com
  license:
    name: test license
  version: v1
host: '127.0.0.1:8000'
schemes:
  - http
basePath: /api/v1
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  '[Bearer (JWT)]':
    type: apiKey
    name: Authorization
    in: header
security:
  - '[Bearer (JWT)]': []
paths:
  /auth/:
    post:
      operationId: auth_create
      description: ''
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/User'
        400:
          description: ''
      tags:
        - auth
    parameters: []
  /tasks/:
    get:
      operationId: tasks_list
      description: ''
      parameters:
        - name: status
          in: query
          description: filter to status
          schema:
            type: string
        - name: before
          in: query
          description: filter planned before query date (including)
          schema:
            type: string
        - name: after
          in: query
          description: filter planned after query date (including)
          schema:
            type: string
        - name: date
          in: query
          description: filter to planned date
          schema:
            type: string
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        400:
          description: Error
        401:
          description: Need JWT token
        403:
          description: No access
        404:
          description: Object not found
      tags:
        - tasks
    post:
      operationId: tasks_create
      description: ''
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/Task'
        400:
          description: Error
        401:
          description: Need JWT token
        403:
          description: No access
        404:
          description: Object not found
      tags:
        - tasks
    parameters: []
  '/tasks/{id}/':
    get:
      operationId: tasks_read
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Task'
        400:
          description: Error
        401:
          description: Need JWT token
        403:
          description: No access
        404:
          description: Object not found
      tags:
        - tasks
    patch:
      operationId: tasks_partial_update
      description: ''
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Task'
        400:
          description: Error
        401:
          description: Need JWT token
        403:
          description: No access
        404:
          description: Object not found
      tags:
        - tasks
    delete:
      operationId: tasks_delete
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
        400:
          description: Error
        401:
          description: Need JWT token
        403:
          description: No access
        404:
          description: Object not found
      tags:
        - tasks
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this task.
        required: true
        type: integer
  '/tasks/{task_id}/changes/':
    get:
      operationId: tasks_changes_list
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            type: array
            items:
              $ref: '#/definitions/Change'
        400:
          description: Error
        401:
          description: Need JWT token
        403:
          description: No access
        404:
          description: Object not found
      tags:
        - tasks
    parameters:
      - name: task_id
        in: path
        required: true
        type: string
  '/tasks/{task_id}/changes/{id}/':
    get:
      operationId: tasks_changes_read
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Change'
        400:
          description: Error
        401:
          description: Need JWT token
        403:
          description: No access
        404:
          description: Object not found
      tags:
        - tasks
    delete:
      operationId: tasks_changes_delete
      description: ''
      parameters: []
      responses:
        '204':
          description: ''
        400:
          description: Error
        401:
          description: Need JWT token
        403:
          description: No access
        404:
          description: Object not found
      tags:
        - tasks
    parameters:
      - name: id
        in: path
        description: A unique integer value identifying this change.
        required: true
        type: integer
      - name: task_id
        in: path
        required: true
        type: string
  /token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TokenObtainPair'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/TokenObtainPair'
        400:
          description:
        401:
          description:
      tags:
        - token
    parameters: []
  /token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/TokenRefresh'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/TokenRefresh'
        400:
          description:
        401:
          description:
      tags:
        - token
    parameters: []
definitions:
  User:
    required:
      - username
      - password
    type: object
    properties:
      username:
        title: Username
        description: 'Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.'
        type: string
        pattern: '^[\w.@+-]+$'
        maxLength: 150
        minLength: 1
      password:
        title: Password
        type: string
        maxLength: 128
        minLength: 1
  Task:
    required:
      - title
      - description
    type: object
    properties:
      id:
        title: ID
        type: integer
        readOnly: true
      author:
        title: Author
        type: string
        pattern: '^[\w.@+-]+$'
        readOnly: true
      title:
        title: Task title
        type: string
        maxLength: 100
        minLength: 1
      description:
        title: Description
        type: string
        maxLength: 1000
        minLength: 1
      created:
        title: Created date
        type: string
        format: date
        readOnly: true
      completed:
        title: Planed completed date
        type: string
        format: date
        x-nullable: true
      status:
        title: Task status
        type: string
        enum:
          - new
          - planned
          - work
          - completed
  Change:
    required:
      - field_name
      - old_value
      - new_value
    type: object
    properties:
      field_name:
        title: Change data
        type: string
        maxLength: 1000
        minLength: 1
      old_value:
        title: Change data
        type: string
        maxLength: 1000
        minLength: 1
      new_value:
        title: Change data
        type: string
        maxLength: 1000
        minLength: 1
      pub_date:
        title: Date of change
        type: string
        format: date-time
        readOnly: true
  TokenObtainPair:
    required:
      - username
      - password
    type: object
    properties:
      username:
        title: Username
        type: string
        minLength: 1
      password:
        title: Password
        type: string
        minLength: 1
  TokenRefresh:
    required:
      - refresh
    type: object
    properties:
      refresh:
        title: Refresh
        type: string
        minLength: 1
